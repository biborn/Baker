# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Agent forwarding over SSH connections
  config.ssh.forward_agent = true

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "{{{vagrant.box}}}"

  #config.ssh.insert_key = false
  #config.ssh.private_key_path = ["~/.baker/ansible-srv/keys/baker_rsa", "~/.vagrant.d/insecure_private_key"]

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://people.virginia.edu/~err8n/ubuntu-13.04.box"

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # Currently using 127.0.0.1 for host ip due to vagrant bug in 1.9.3, fixed in 1.9.4:
    # https://github.com/mitchellh/vagrant/issues/8395

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
  {{#vagrant.network}}
    {{#forwarded_port}}
    config.vm.network "forwarded_port", guest: {{guest}}, host: {{host}}, host_ip: "127.0.0.1"
    {{/forwarded_port}}
    {{#private_network}}
    config.vm.network "private_network", ip: "{{ip}}"
    {{/private_network}}
    {{#public_network}}
    config.vm.network "public_network"
    {{/public_network}}
  {{/vagrant.network}}

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  {{#vagrant.synced_folders}}
    config.vm.synced_folder "{{{folder.src}}}", "{{{folder.dest}}}"
  {{/vagrant.synced_folders}}

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  # change the network card hardware for better performance
    vb.customize ["modifyvm", :id, "--nictype1", "virtio" ]
    vb.customize ["modifyvm", :id, "--nictype2", "virtio" ]

  # suggested fix for slow network performance
  # see https://github.com/mitchellh/vagrant/issues/1807
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
     # Customize the amount of memory on the VM:
     vb.memory = "{{vagrant.memory}}"
     # fix crappy dns
     # https://serverfault.com/questions/453185/vagrant-virtualbox-dns-10-0-2-3-not-working
     vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
     # Setting VM name in virtualbox
     vb.name = "{{name}}"
  end

  # Setting VM name in vagrant
  config.vm.define "{{name}}" do |t|
  end
  config.vm.hostname = "{{name}}"

  # Install python 2 if not installed.
  config.vm.provision "shell",
    inline: "test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)"

  #config.vm.provision "file", source: "~/.baker/ansible-srv/keys/baker_rsa.pub", destination: "~/.ssh/authorized_keys"
  ssh_pub_key = File.readlines("#{Dir.home}/.baker/ansible-srv/keys/baker_rsa.pub").first.strip
  config.vm.provision 'shell', inline: 'mkdir -p /root/.ssh'
  config.vm.provision 'shell', inline: "echo #{ssh_pub_key} >> /root/.ssh/authorized_keys"
  config.vm.provision 'shell', inline: "echo #{ssh_pub_key} >> /home/$USER/.ssh/authorized_keys", privileged: false

end
